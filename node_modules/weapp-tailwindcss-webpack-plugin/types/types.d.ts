import type { InjectPreflight } from './postcss/preflight';
import type { Rule } from "../node_modules/postcss";
import type ClassGenerator from "./mangle/classGenerator";
import type { GeneratorResult } from '@babel/generator';
export type ItemOrItemArray<T> = T | T[];
export type { TraverseOptions } from '@babel/traverse';
export type { Node } from '@babel/types';
export type AppType = 'uni-app' | 'taro' | 'remax' | 'rax' | 'native' | 'kbone' | 'mpx';
export interface IPropValue {
    prop: string;
    value: string;
}
export type CssPresetProps = string;
export type CssPreflightOptions = {
    [key: CssPresetProps]: string | number | boolean;
} | false;
type RequiredStyleHandlerOptions = {
    isMainChunk: boolean;
    cssInjectPreflight?: InjectPreflight;
    cssPreflightRange?: 'view' | 'all';
    replaceUniversalSelectorWith?: string | false;
    escapeEntries?: [string, string][];
};
export type CustomRuleCallback = (node: Rule, options: Readonly<RequiredStyleHandlerOptions>) => void;
export type IStyleHandlerOptions = {
    customRuleCallback?: CustomRuleCallback;
    classGenerator?: ClassGenerator;
} & RequiredStyleHandlerOptions;
export type ICustomAttributes = Record<string, ItemOrItemArray<string | RegExp>> | Map<string | RegExp, ItemOrItemArray<string | RegExp>>;
export type ICustomAttributesEntities = [string | RegExp, ItemOrItemArray<string | RegExp>][];
export type IJsxHandlerOptions = {
    escapeEntries?: [string, string][];
    framework?: string;
    customAttributesEntities?: ICustomAttributesEntities;
    allMatchedAttributes?: (string | RegExp)[];
};
export interface RawSource {
    start: number;
    end: number;
    raw: string;
    source?: string;
    prevConcatenated: boolean;
    nextConcatenated: boolean;
}
export interface IMangleContextClass {
    name: string;
    usedBy: any[];
}
export interface JsxRenameLoaderOptions {
    write?: false | {
        dir?: string;
        filename?: string;
    };
    jsxHandler: (rawSource: string, options?: IJsxHandlerOptions) => GeneratorResult;
}
export interface IMangleOptions {
    reserveClassName?: (string | RegExp)[];
    classGenerator?: (original: string, opts: IMangleOptions, context: Record<string, any>) => string | undefined;
    log?: boolean;
    exclude?: (string | RegExp)[];
    include?: (string | RegExp)[];
    ignoreClass?: (string | RegExp)[];
}
export interface IManglePluginOptions extends IMangleOptions {
    classNameRegExp?: string;
    reserveClassName?: (string | RegExp)[];
    ignorePrefix?: string[];
    ignorePrefixRegExp?: string;
    classGenerator?: (original: string, opts: IMangleOptions, context: Record<string, any>) => string | undefined;
    log?: boolean;
}
export interface ILengthUnitsPatchDangerousOptions {
    packageName?: string;
    gteVersion?: string;
    lengthUnitsFilePath?: string;
    variableName?: string;
    overwrite?: boolean;
    destPath?: string;
}
export interface ILengthUnitsPatchOptions {
    units: string[];
    paths?: string[];
    dangerousOptions?: ILengthUnitsPatchDangerousOptions;
}
export interface UserDefinedOptions {
    htmlMatcher?: ((name: string) => boolean) | string | string[];
    cssMatcher?: ((name: string) => boolean) | string | string[];
    jsMatcher?: ((name: string) => boolean) | string | string[];
    mainCssChunkMatcher?: ((name: string, appType?: AppType) => boolean) | string | string[];
    cssPreflight?: CssPreflightOptions;
    cssPreflightRange?: 'view' | 'all';
    replaceUniversalSelectorWith?: string | false;
    disabled?: boolean;
    customRuleCallback?: CustomRuleCallback;
    onLoad?: () => void;
    onStart?: () => void;
    onUpdate?: (filename: string, oldVal: string, newVal: string) => void;
    onEnd?: () => void;
    mangle?: IMangleOptions | boolean;
    framework?: 'react' | 'vue' | 'vue3' | string;
    loaderOptions?: {
        jsxRename?: JsxRenameLoaderOptions['write'];
    };
    customAttributes?: ICustomAttributes;
    customReplaceDictionary?: 'simple' | 'complex' | Record<string, string>;
    jsxRenameLoaderPath?: string;
    supportCustomLengthUnitsPatch?: ILengthUnitsPatchOptions | boolean;
}
export interface ICommonReplaceOptions {
    keepEOL?: boolean;
    classGenerator?: ClassGenerator;
    escapeEntries?: [string, string][];
}
export type ICustomRegexp = {
    tagRegexp: RegExp;
    attrRegexp: RegExp;
    tag: string;
    attrs: ItemOrItemArray<string | RegExp>;
};
export interface ITempleteHandlerOptions extends ICommonReplaceOptions {
    customAttributesEntities?: ICustomAttributesEntities;
    escapeEntries?: [string, string][];
}
export type GlobOrFunctionMatchers = 'htmlMatcher' | 'cssMatcher' | 'jsMatcher' | 'mainCssChunkMatcher';
export type InternalUserDefinedOptions = Required<Omit<UserDefinedOptions, GlobOrFunctionMatchers | 'supportCustomLengthUnitsPatch' | 'customReplaceDictionary'> & {
    [K in GlobOrFunctionMatchers]: K extends 'mainCssChunkMatcher' ? (name: string, appType: AppType) => boolean : (name: string) => boolean;
} & {
    supportCustomLengthUnitsPatch: ILengthUnitsPatchOptions | false;
    templeteHandler: (rawSource: string, options?: ITempleteHandlerOptions) => string;
    styleHandler: (rawSource: string, options: IStyleHandlerOptions) => string;
    jsxHandler: (rawSource: string, options?: IJsxHandlerOptions) => GeneratorResult;
    escapeEntries: [string, string][];
    patch: () => void;
    customReplaceDictionary: Record<string, string>;
}>;
export type InternalPostcssOptions = Pick<UserDefinedOptions, 'cssMatcher' | 'mainCssChunkMatcher' | 'cssPreflight' | 'replaceUniversalSelectorWith' | 'cssPreflightRange' | 'customRuleCallback' | 'disabled'> & {
    classGenerator?: ClassGenerator;
};
export interface IBaseWebpackPlugin {
    options: InternalUserDefinedOptions;
    appType: AppType;
    classGenerator?: ClassGenerator;
    apply: (compiler: any) => void;
}
