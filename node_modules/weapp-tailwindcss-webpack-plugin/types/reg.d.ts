import type { ICustomRegexp, ItemOrItemArray } from "./types";
export declare function escapeStringRegexp(str: string): string;
export declare const templateClassExactRegexp: RegExp;
export declare const tagWithEitherClassAndHoverClassRegexp: RegExp;
interface ICreateRegexpOptions {
    exact?: boolean;
}
export declare function handleRegexp(reg: RegExp): string;
export declare function getSourceString(input: string | RegExp): string;
export declare function makePattern(arr: ItemOrItemArray<string | RegExp>): string;
export declare function createTempleteHandlerMatchRegexp(tag: string | RegExp, attrs: ItemOrItemArray<string | RegExp>, options?: ICreateRegexpOptions): RegExp;
export declare function createTemplateClassRegexp(attrs: ItemOrItemArray<string | RegExp>, options?: ICreateRegexpOptions): RegExp;
export declare function makeCustomAttributes(entries?: [string | RegExp, ItemOrItemArray<string | RegExp>][]): ICustomRegexp[] | undefined;
export declare const variableRegExp: RegExp;
export declare function variableMatch(original: string): RegExpExecArray | null;
export declare const classRegexp: RegExp;
export declare const vueTemplateClassRegexp: RegExp;
export declare const tagRegexp: RegExp;
export declare const tagWithClassRegexp: RegExp;
export declare function classStringReplace(str: string, replacement: (substring: string, ...args: any[]) => string): string;
export declare function tagStringReplace(str: string, replacement: (substring: string, ...args: any[]) => string): string;
export declare const wxmlAllowClassCharsRegExp: RegExp;
export declare function createWxmlAllowClassCharsRegExp(): RegExp;
export declare const doubleQuoteRegexp: RegExp;
export declare function doubleQuoteStringReplace(str: string, replacement: (substring: string, ...args: any[]) => string): string;
export {};
