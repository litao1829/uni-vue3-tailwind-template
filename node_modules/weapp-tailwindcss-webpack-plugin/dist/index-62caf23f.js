'use strict';

var defaults = require('./defaults-464f242a.js');
var constants = require('./constants-ff495628.js');
var webpackSources = require('webpack-sources');
var shared = require('./shared-6c9547c3.js');
var path = require('path');
var webpack = require('webpack');
require('micromatch');
require('@babel/generator');
require('@babel/parser');
require('@babel/traverse');
require('postcss');
require('postcss-selector-parser');
require('fs');
require('semver');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var path__default = /*#__PURE__*/_interopDefaultCompat(path);

class BaseJsxWebpackPluginV4 {
    constructor(options = { framework: 'react' }, appType) {
        this.options = defaults.getOptions(options, ['jsx', 'style', 'patch']);
        this.appType = appType;
    }
    apply(compiler) {
        const { jsMatcher, mainCssChunkMatcher, framework, disabled, onLoad, onUpdate, onEnd, onStart, loaderOptions, styleHandler, jsxHandler, jsxRenameLoaderPath, patch } = this.options;
        if (disabled) {
            return;
        }
        patch === null || patch === void 0 ? void 0 : patch();
        const isReact = framework === 'react';
        const loader = jsxRenameLoaderPath || path__default["default"].resolve(__dirname, `${constants.NS}.js`);
        onLoad();
        compiler.hooks.compilation.tap(constants.pluginName, (compilation) => {
            compilation.hooks.normalModuleLoader.tap(constants.pluginName, (loaderContext, module) => {
                if (jsMatcher(module.resource)) {
                    const rule = {
                        loader,
                        options: {
                            jsxHandler,
                            write: loaderOptions.jsxRename
                        }
                    };
                    module.loaders.unshift(rule);
                }
            });
        });
        compiler.hooks.emit.tap(constants.pluginName, (compilation) => {
            onStart();
            const entries = Object.entries(compilation.assets);
            const groupedEntries = shared.getGroupedEntries(entries, this.options);
            if (!isReact && Array.isArray(groupedEntries.js)) {
                for (let i = 0; i < groupedEntries.js.length; i++) {
                    const [file, originalSource] = groupedEntries.js[i];
                    const rawSource = originalSource.source().toString();
                    const { code } = jsxHandler(rawSource);
                    const source = new webpackSources.ConcatSource(code);
                    compilation.updateAsset(file, source);
                    onUpdate(file, rawSource, code);
                }
            }
            if (Array.isArray(groupedEntries.css)) {
                for (let i = 0; i < groupedEntries.css.length; i++) {
                    const [file, originalSource] = groupedEntries.css[i];
                    const rawSource = originalSource.source().toString();
                    const css = styleHandler(rawSource, {
                        isMainChunk: mainCssChunkMatcher(file, this.appType)
                    });
                    const source = new webpackSources.ConcatSource(css);
                    compilation.updateAsset(file, source);
                    onUpdate(file, rawSource, css);
                }
            }
            onEnd();
        });
    }
}
BaseJsxWebpackPluginV4.NS = constants.NS;

class BaseTemplateWebpackPluginV4 {
    constructor(options = {}, appType) {
        this.options = defaults.getOptions(options, ['templete', 'style', 'patch']);
        this.appType = appType;
    }
    apply(compiler) {
        const { mainCssChunkMatcher, disabled, onLoad, onUpdate, onEnd, onStart, templeteHandler, styleHandler, patch } = this.options;
        if (disabled) {
            return;
        }
        patch === null || patch === void 0 ? void 0 : patch();
        onLoad();
        compiler.hooks.emit.tap(constants.pluginName, (compilation) => {
            onStart();
            const entries = Object.entries(compilation.assets);
            const groupedEntries = shared.getGroupedEntries(entries, this.options);
            if (Array.isArray(groupedEntries.html)) {
                for (let i = 0; i < groupedEntries.html.length; i++) {
                    const [file, originalSource] = groupedEntries.html[i];
                    const rawSource = originalSource.source().toString();
                    const wxml = templeteHandler(rawSource, {});
                    const source = new webpackSources.ConcatSource(wxml);
                    compilation.updateAsset(file, source);
                    onUpdate(file, rawSource, wxml);
                }
            }
            if (Array.isArray(groupedEntries.css)) {
                for (let i = 0; i < groupedEntries.css.length; i++) {
                    const [file, originalSource] = groupedEntries.css[i];
                    const rawSource = originalSource.source().toString();
                    const css = styleHandler(rawSource, {
                        isMainChunk: mainCssChunkMatcher(file, this.appType)
                    });
                    const source = new webpackSources.ConcatSource(css);
                    compilation.updateAsset(file, source);
                    onUpdate(file, rawSource, css);
                }
            }
            onEnd();
        });
    }
}

class BaseJsxWebpackPluginV5 {
    constructor(options = { framework: 'react' }, appType) {
        this.options = defaults.getOptions(options, ['jsx', 'style', 'patch']);
        this.appType = appType;
    }
    apply(compiler) {
        const { jsMatcher, mainCssChunkMatcher, framework, disabled, onLoad, onUpdate, onEnd, onStart, loaderOptions, styleHandler, jsxHandler, jsxRenameLoaderPath, patch } = this.options;
        if (disabled) {
            return;
        }
        patch === null || patch === void 0 ? void 0 : patch();
        const Compilation = compiler.webpack.Compilation;
        const { ConcatSource } = compiler.webpack.sources;
        const isReact = framework === 'react';
        const loader = jsxRenameLoaderPath || path__default["default"].resolve(__dirname, `${constants.NS}.js`);
        onLoad();
        compiler.hooks.compilation.tap(constants.pluginName, (compilation) => {
            webpack.NormalModule.getCompilationHooks(compilation).loader.tap(constants.pluginName, (loaderContext, module) => {
                if (jsMatcher(module.resource)) {
                    const rule = {
                        loader,
                        options: {
                            jsxHandler,
                            write: loaderOptions.jsxRename
                        },
                        ident: null,
                        type: null
                    };
                    module.loaders.unshift(rule);
                }
            });
            compilation.hooks.processAssets.tap({
                name: constants.pluginName,
                stage: Compilation.PROCESS_ASSETS_STAGE_SUMMARIZE
            }, (assets) => {
                onStart();
                const entries = Object.entries(assets);
                const groupedEntries = shared.getGroupedEntries(entries, this.options);
                if (!isReact && Array.isArray(groupedEntries.js)) {
                    for (let i = 0; i < groupedEntries.js.length; i++) {
                        const [file, originalSource] = groupedEntries.js[i];
                        const rawSource = originalSource.source().toString();
                        const { code } = jsxHandler(rawSource);
                        const source = new ConcatSource(code);
                        compilation.updateAsset(file, source);
                        onUpdate(file, rawSource, code);
                    }
                }
                if (Array.isArray(groupedEntries.css)) {
                    for (let i = 0; i < groupedEntries.css.length; i++) {
                        const [file, originalSource] = groupedEntries.css[i];
                        const rawSource = originalSource.source().toString();
                        const css = styleHandler(rawSource, {
                            isMainChunk: mainCssChunkMatcher(file, this.appType)
                        });
                        const source = new ConcatSource(css);
                        compilation.updateAsset(file, source);
                        onUpdate(file, rawSource, css);
                    }
                }
                onEnd();
            });
        });
    }
}
BaseJsxWebpackPluginV5.NS = constants.NS;

class BaseTemplateWebpackPluginV5 {
    constructor(options = {}, appType) {
        this.options = defaults.getOptions(options, ['templete', 'style', 'patch']);
        this.appType = appType;
    }
    apply(compiler) {
        const { mainCssChunkMatcher, disabled, onLoad, onUpdate, onEnd, onStart, templeteHandler, styleHandler, patch } = this.options;
        if (disabled) {
            return;
        }
        patch === null || patch === void 0 ? void 0 : patch();
        const { ConcatSource } = compiler.webpack.sources;
        const Compilation = compiler.webpack.Compilation;
        onLoad();
        compiler.hooks.compilation.tap(constants.pluginName, (compilation) => {
            compilation.hooks.processAssets.tap({
                name: constants.pluginName,
                stage: Compilation.PROCESS_ASSETS_STAGE_SUMMARIZE
            }, (assets) => {
                onStart();
                const entries = Object.entries(assets);
                const groupedEntries = shared.getGroupedEntries(entries, this.options);
                if (Array.isArray(groupedEntries.html)) {
                    for (let i = 0; i < groupedEntries.html.length; i++) {
                        const [file, originalSource] = groupedEntries.html[i];
                        const rawSource = originalSource.source().toString();
                        const wxml = templeteHandler(rawSource, {});
                        const source = new ConcatSource(wxml);
                        compilation.updateAsset(file, source);
                        onUpdate(file, rawSource, wxml);
                    }
                }
                if (Array.isArray(groupedEntries.css)) {
                    for (let i = 0; i < groupedEntries.css.length; i++) {
                        const [file, originalSource] = groupedEntries.css[i];
                        const rawSource = originalSource.source().toString();
                        const css = styleHandler(rawSource, {
                            isMainChunk: mainCssChunkMatcher(file, this.appType)
                        });
                        const source = new ConcatSource(css);
                        compilation.updateAsset(file, source);
                        onUpdate(file, rawSource, css);
                    }
                }
                onEnd();
            });
        });
    }
}

class UniAppWeappTailwindcssWebpackPluginV4 extends BaseTemplateWebpackPluginV4 {
    constructor(options = {}) {
        super(options, 'uni-app');
    }
}
class UniAppWeappTailwindcssWebpackPluginV5 extends BaseTemplateWebpackPluginV5 {
    constructor(options = {}) {
        super(options, 'uni-app');
    }
}

class TaroWeappTailwindcssWebpackPluginV4 extends BaseJsxWebpackPluginV4 {
    constructor(options = { framework: 'react' }) {
        super(options, 'taro');
    }
}
class TaroWeappTailwindcssWebpackPluginV5 extends BaseJsxWebpackPluginV5 {
    constructor(options = { framework: 'react' }) {
        super(options, 'taro');
    }
}

exports.BaseJsxWebpackPluginV4 = BaseJsxWebpackPluginV4;
exports.BaseJsxWebpackPluginV5 = BaseJsxWebpackPluginV5;
exports.BaseTemplateWebpackPluginV4 = BaseTemplateWebpackPluginV4;
exports.BaseTemplateWebpackPluginV5 = BaseTemplateWebpackPluginV5;
exports.TaroWeappTailwindcssWebpackPluginV4 = TaroWeappTailwindcssWebpackPluginV4;
exports.TaroWeappTailwindcssWebpackPluginV5 = TaroWeappTailwindcssWebpackPluginV5;
exports.UniAppWeappTailwindcssWebpackPluginV4 = UniAppWeappTailwindcssWebpackPluginV4;
exports.UniAppWeappTailwindcssWebpackPluginV5 = UniAppWeappTailwindcssWebpackPluginV5;
