'use strict';

function groupBy(arr, cb) {
    if (!Array.isArray(arr)) {
        throw new Error('expected an array for first argument');
    }
    if (typeof cb !== 'function') {
        throw new Error('expected a function for second argument');
    }
    const result = {};
    for (let i = 0; i < arr.length; i++) {
        const item = arr[i];
        const bucketCategory = cb(item);
        const bucket = result[bucketCategory];
        if (!Array.isArray(bucket)) {
            result[bucketCategory] = [item];
        }
        else {
            result[bucketCategory].push(item);
        }
    }
    return result;
}
function getGroupedEntries(entries, options) {
    const { cssMatcher, htmlMatcher, jsMatcher } = options;
    const groupedEntries = groupBy(entries, ([file]) => {
        if (cssMatcher(file)) {
            return 'css';
        }
        else if (htmlMatcher(file)) {
            return 'html';
        }
        else if (jsMatcher(file)) {
            return 'js';
        }
        else {
            return 'other';
        }
    });
    return groupedEntries;
}

exports.getGroupedEntries = getGroupedEntries;
